(undo-tree-save-format-version . 1)
"867ca9edc57c26657204e1223c7782d0ed3024b8"
[nil nil nil nil (25473 8063 948887 999000) 0 nil]
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -12) (undo-tree-id1 . -1) 13 (t 24410 12966 913954 196000)) nil (25473 8067 529145 523000) 0 nil] [nil nil ((#("[" 0 1 (fontified t)) . -15) (undo-tree-id0 . -1) 16 (t 24410 12966 913954 196000)) ((nil ws-butler-chg delete 16 . 17) (15 . 16)) (25473 8063 948719 969000) 0 nil])
([nil nil ((78 . 80) (t 25473 8067 542565 651000)) nil (25473 8192 338069 411000) 0 nil])
nil
([nil nil ((#("@" 0 1 (ws-butler-chg chg fontified t)) . -78) (undo-tree-id291 . -1) (#("@" 0 1 (ws-butler-chg chg fontified t)) . -79) (undo-tree-id292 . -1) 80) nil (25473 8192 338067 827000) 0 nil])
([nil nil ((78 . 80)) nil (25473 8192 338065 250000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face syntax-table (3) ws-butler-chg chg fontified t)) . -79) (undo-tree-id290 . -1) 80) nil (25473 8192 338063 933000) 0 nil])
([nil nil ((127 . 128)) nil (25473 8192 338061 945000) 0 nil])
([nil nil ((210 . 211)) nil (25473 8192 338060 780000) 0 nil])
([nil nil ((nil rear-nonsticky nil 341 . 342) (nil fontified nil 341 . 342) (nil fontified nil 265 . 341) (nil fontified nil 264 . 265) (nil fontified nil 260 . 264) (nil fontified nil 259 . 260) (nil fontified nil 258 . 259) (nil fontified nil 220 . 258) (nil fontified nil 219 . 220) (nil fontified nil 212 . 219) (nil fontified nil 211 . 212) (nil fontified nil 210 . 211) (210 . 342)) nil (25473 8192 338059 230000) 0 nil])
([nil nil ((210 . 211)) nil (25473 8192 338055 394000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t ws-butler-chg chg)) . -211) (undo-tree-id289 . -1) 212) nil (25473 8192 338054 44000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t ws-butler-chg chg)) . -259) (undo-tree-id288 . -1) 260) nil (25473 8192 338051 960000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -236) (undo-tree-id281 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -237) (undo-tree-id282 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -238) (undo-tree-id283 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -239) (undo-tree-id284 . -1) (#("a" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -240) (undo-tree-id285 . -1) (#("g" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -241) (undo-tree-id286 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -242) (undo-tree-id287 . -1) 243) nil (25473 8192 338048 258000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg delete)) . -236) (undo-tree-id280 . -1) 237) nil (25473 8192 338041 890000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t ws-butler-chg delete)) . -236) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -237) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -238) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("k" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -239) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -240) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (#("x" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -241) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -242) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -243) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("_" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -244) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -245) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -246) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -247) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -248) (undo-tree-id279 . -1) 249) nil (25473 8192 338036 408000) 0 nil])
([nil nil ((236 . 240)) nil (25473 8192 338004 143000) 0 nil])
([nil nil ((240 . 246)) nil (25473 8192 338003 29000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -241) (undo-tree-id226 . -1) (#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -242) (undo-tree-id227 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -243) (undo-tree-id228 . -1) (#("y" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -244) (undo-tree-id229 . -1) (#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -245) (undo-tree-id230 . -1) 246) nil (25473 8192 338001 117000) 0 nil])
([nil nil ((241 . 244)) nil (25473 8192 337994 871000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -242) (undo-tree-id224 . -1) (#("c" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -243) (undo-tree-id225 . -1) 244) nil (25473 8192 337993 686000) 0 nil])
([nil nil ((242 . 244)) nil (25473 8192 337991 565000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -242) (undo-tree-id222 . -1) (#("y" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -243) (undo-tree-id223 . -1) 244) nil (25473 8192 337990 226000) 0 nil])
([nil nil ((242 . 245)) nil (25473 8192 337987 878000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -306) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -307) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -308) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -309) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -310) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("a" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -311) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("m" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -312) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (#("f" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -313) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("s" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -314) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -315) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("1" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -316) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("." 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -317) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("0" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -318) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -319) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -320) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (#("0" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -321) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -322) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -323) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -324) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -325) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -326) (undo-tree-id221 . -1) 327) nil (25473 8192 337981 639000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -285) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -286) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -287) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("x" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -288) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -289) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -290) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -291) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("m" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -292) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("0" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -293) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -294) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -295) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("m" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -296) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("a" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -297) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#("g" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -298) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("e" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -299) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -300) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -301) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("h" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -302) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -303) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("n" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -304) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -305) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) 306) nil (25473 8192 337929 413000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -264) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -265) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("m" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -266) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("p" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -267) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -268) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("w" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -269) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("o" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -270) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("r" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -271) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("k" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -272) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -273) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("x" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -274) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("8" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -275) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("6" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -276) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("_" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -277) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("6" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -278) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (#("4" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -279) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -280) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("x" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -281) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("t" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -282) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("-" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -283) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#("l" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -284) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 285) nil (25473 8192 337865 427000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -253) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -254) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -255) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (#("l" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -256) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -257) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("/" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -258) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("b" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -259) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("u" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -260) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("i" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -261) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("l" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -262) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("d" 0 1 (face font-lock-string-face fontified t ws-butler-chg chg)) . -263) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 264) nil (25473 8192 337746 269000) 0 nil])
([nil nil ((253 . 263)) nil (25473 8427 273032 743000) 0 nil])
([nil nil ((319 . 326) (t 25473 8192 352222 614000)) nil (25473 8486 238408 674000) 0 nil] [nil nil ((247 . 249) (t 25473 8192 352222 614000)) ((#(":q" 0 1 (ws-butler-chg chg fontified t) 1 2 (face font-lock-variable-name-face ws-butler-chg chg fontified t)) . 247) (undo-tree-id0 . -2)) (25473 8427 272853 750000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t ws-butler-chg chg)) . -325) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 326) nil (25473 8486 238406 910000) 0 nil])
nil
([nil nil ((325 . 327)) nil (25473 8486 238404 292000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . -282) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("{" 0 1 (fontified t)) . -283) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("D" 0 1 (fontified t face font-lock-variable-name-face)) . -284) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("O" 0 1 (fontified t face font-lock-variable-name-face)) . -285) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("M" 0 1 (fontified t face font-lock-variable-name-face)) . -286) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("0" 0 1 (fontified t face font-lock-variable-name-face)) . -287) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("}" 0 1 (fontified t)) . -288) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 289) nil (25473 8486 238399 50000) 0 nil])
([nil nil ((236 . 241) (t 25473 8486 252272 324000)) nil (25473 8657 971605 336000) 0 nil])
([nil nil ((#("XEN_PROD=\"/home/amoiseev/work/aos/yocto\"
" 0 8 (face font-lock-variable-name-face fontified t) 8 9 (fontified t) 9 40 (face font-lock-string-face fontified t) 40 41 (fontified t)) . 211) (undo-tree-id5 . -1) (undo-tree-id6 . -2) (undo-tree-id7 . -2) 212 (t 25473 8657 983858 955000)) nil (25489 47649 265135 34000) 0 nil])
([nil nil ((13 . 14)) nil (25489 47649 265131 569000) 0 nil])
([nil nil ((14 . 21)) nil (25489 47649 265130 654000) 0 nil])
([nil nil ((#("r" 0 1 (ws-butler-chg chg fontified t)) . -20) (undo-tree-id4 . -1) 21) nil (25489 47649 265129 306000) 0 nil])
([nil nil ((20 . 30)) nil (25489 47649 265127 283000) 0 nil])
([nil nil ((21 . 36) (#("~/bin/dom" 0 9 (ws-butler-chg chg fontified t)) . -21) (undo-tree-id1 . -9) (undo-tree-id2 . -6) (undo-tree-id3 . -9) 30) nil (25489 47649 265125 381000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -35) (undo-tree-id0 . -1) 36) nil (25489 47649 265117 529000) 0 nil])
([nil nil ((35 . 36) (t 25489 47649 280406 49000)) nil (25489 47654 692261 4000) 0 nil])
([nil nil ((#("#XEN_PROD=\"/home/amoiseev/storage/work/xen_prod\"
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 49 (face font-lock-comment-face fontified t)) . 101) (undo-tree-id15 . -10) (undo-tree-id16 . -3) (undo-tree-id17 . -6) (undo-tree-id18 . -6) (undo-tree-id19 . -6) 107 (t 25489 47650 644500 686000)) nil (25489 47723 713316 184000) 0 nil] [nil nil ((#("#XEN_PROD=\"/home/amoiseev/storage/work/xen_prod\"
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 49 (face font-lock-comment-face fontified t)) . 101) (undo-tree-id8 . -49) (undo-tree-id9 . -49) (undo-tree-id10 . -2) (undo-tree-id11 . -10) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -2) 103 (t 25489 47650 644500 686000)) ((nil ws-butler-chg delete 150 . 151) (101 . 150)) (25489 47654 692057 582000) 0 nil])
([nil nil ((#("#DOM0=\"build/build/tmp/work/x86_64-xt-linux/dom0-image-thin-initramfs/1.0-r0/repo\"
" 0 1 (face font-lock-comment-delimiter-face ws-butler-chg delete fontified t) 1 83 (face font-lock-comment-face fontified t)) . 101)) nil (25489 47723 713300 674000) 0 nil])
nil
([nil current ((#("
" 0 1 (fontified t)) . 120) (t 25489 47723 728189 170000)) nil (25489 47857 605236 513000) 0 nil])
nil
